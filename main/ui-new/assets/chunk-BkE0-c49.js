import{g as e,a as t}from"./chunk-DwRD3xX6.js";import{i as s}from"./chunk-CxE4G7Dl.js";import{a as n,c as r}from"./chunk-CloFZg_W.js";const i=new class{eventListeners=new Map;nestingProgress=0;isNesting=!1;activeWorkers=new Set;nestResults=[];get isAvailable(){return s()||"undefined"!=typeof window&&!!window.electronAPI}async invoke(e,...t){if(!this.isAvailable)throw new Error("IPC not available");if(s())return this.handleMockInvoke(e,...t);try{return await window.electronAPI.ipcRenderer.invoke(e,...t)}catch(n){throw n}}async handleMockInvoke(e,...t){switch(await new Promise(e=>setTimeout(e,100)),e){case"read-config":return{units:"mm",scale:1,spacing:2,rotations:4,populationSize:20,mutationRate:10,threads:4,placementType:"gravity",mergeLines:!0,timeRatio:.5,simplify:!1,tolerance:.1,endpointTolerance:.05,svgScale:1,dxfImportUnits:"mm",dxfExportUnits:"mm",exportSheetBounds:!1,exportSheetSpacing:!1,sheetSpacing:10,useQuantityFromFilename:!1,useSvgPreProcessor:!1,conversionServer:"https://converter.deepnest.app/convert"};case"write-config":case"save-preset":case"delete-preset":case"start-nesting":case"stop-nesting":default:return;case"load-presets":return{default:JSON.stringify({units:"mm",spacing:2,rotations:4}),precision:JSON.stringify({units:"inches",spacing:.1,rotations:8})};case"open-file-dialog":return{canceled:!1,filePaths:["/mock/path/example.svg"]};case"save-file-dialog":return{canceled:!1,filePath:"/mock/path/output.svg"};case"import-parts":return[{id:"mock-part-1",name:"Mock Part",bounds:{x:0,y:0,width:100,height:50},quantity:1,rotation:0}]}}simulateBackgroundWorker(){if(!s())return;let e=0;const t=setInterval(()=>{e+=.1,this.emitToUIListeners("background-progress",{index:0,progress:Math.min(e,1)}),e>=1&&(clearInterval(t),this.emitToUIListeners("background-progress",{index:0,progress:-1}),setTimeout(()=>{this.emitToUIListeners("background-response",{index:0,fitness:.85,area:85e3,totalarea:1e5,mergedLength:0,utilisation:.85,placements:[{sheet:0,sheetid:1,sheetplacements:[{id:1,source:0,x:10,y:10,rotation:0}]}]})},500))},200)}async startNesting(e){return this.isNesting=!0,this.nestingProgress=0,this.nestResults=[],this.activeWorkers.clear(),this.eventListeners.has("background-progress")||this.initializeBackgroundWorkerListeners(),this.emitToUIListeners("nest-status",{isRunning:!0,operation:"Starting nesting..."}),s()?(setTimeout(()=>this.simulateBackgroundWorker(),1e3),Promise.resolve()):this.invoke("start-nesting",e)}async stopNesting(){return this.isNesting=!1,this.activeWorkers.clear(),this.emitToUIListeners("nest-status",{isRunning:!1,operation:"Stopped"}),s()?Promise.resolve():this.invoke("stop-nesting")}on(e,t){if(!this.isAvailable)return()=>{};const n=String(e);return this.eventListeners.has(n)||this.eventListeners.set(n,new Set),this.eventListeners.get(n).add(t),s()?()=>{const e=this.eventListeners.get(n);e&&(e.delete(t),0===e.size&&this.eventListeners.delete(n))}:(window.electronAPI.ipcRenderer.on(e,t),()=>{const s=this.eventListeners.get(n);s&&(s.delete(t),0===s.size&&(this.eventListeners.delete(n),window.electronAPI?.ipcRenderer&&window.electronAPI.ipcRenderer.removeAllListeners(e)))})}send(e,...t){this.isAvailable&&(s()||window.electronAPI.ipcRenderer.send(e,...t))}async readConfig(){return this.invoke("read-config")}async writeConfig(e){return this.invoke("write-config",JSON.stringify(e))}async savePreset(e,t){return this.invoke("save-preset",e,JSON.stringify(t))}async loadPresets(){return this.invoke("load-presets")}async deletePreset(e){return this.invoke("delete-preset",e)}async openFileDialog(){return this.invoke("open-file-dialog")}async saveFileDialog(){return this.invoke("save-file-dialog")}async importParts(e){return this.invoke("import-parts",e)}stopBackgroundWorker(){this.send("background-stop"),this.isNesting=!1,this.activeWorkers.clear()}initializeBackgroundWorkerListeners(){this.on("background-progress",e=>{this.activeWorkers.add(e.index),-1===e.progress&&this.activeWorkers.delete(e.index),this.nestingProgress=-1===e.progress?1:Math.max(this.nestingProgress,e.progress),this.emitToUIListeners("nest-progress",this.nestingProgress),this.emitToUIListeners("nest-status",{isRunning:this.isNesting&&this.activeWorkers.size>0,operation:-1===e.progress?"Complete":"Calculating placement..."})}),this.on("background-response",e=>{this.handleBackgroundWorkerResult(e)}),this.on("setPlacements",e=>{this.handleBackgroundWorkerResult(e)})}handleBackgroundWorkerResult(e){const t={id:`result-${e.index}`,fitness:e.fitness,area:e.area,totalArea:e.totalarea,utilisation:e.utilisation,sheets:e.placements.map(e=>({id:e.sheetid,parts:e.sheetplacements.map(e=>({id:e.id,x:e.x,y:e.y,rotation:e.rotation}))}))};this.nestResults.push(t),(1===this.nestResults.length||e.fitness<Math.min(...this.nestResults.map(e=>e.fitness)))&&this.emitToUIListeners("nest-complete",[...this.nestResults])}emitToUIListeners(e,t){const s=this.eventListeners.get(e);s&&s.forEach(e=>{try{e(t)}catch(s){}})}onNestProgress(e){return this.on("nest-progress",e)}onNestComplete(e){return this.on("nest-complete",e)}onNestStatus(e){return this.on("nest-status",e)}onNestError(e){return this.on("nest-error",e)}onBackgroundProgress(e){return this.on("background-progress",e)}onBackgroundResponse(e){return this.on("background-response",e)}onSetPlacements(e){return this.on("setPlacements",e)}cleanup(){if(this.isAvailable){for(const e of this.eventListeners.keys())window.electronAPI.ipcRenderer.removeAllListeners(e);this.eventListeners.clear(),this.isNesting=!1,this.nestingProgress=0,this.activeWorkers.clear(),this.nestResults=[]}}},o=new class{progressCleanup=null;statusCleanup=null;completeCleanup=null;errorCleanup=null;constructor(){this.initializeEventListeners()}initializeEventListeners(){this.progressCleanup=i.onNestProgress(t=>{e.setNestingProgress(t)}),this.statusCleanup=i.onNestStatus(t=>{e.setNestingStatus(t.isRunning),e.setWorkerStatus({isRunning:t.isRunning,currentOperation:t.operation})}),this.completeCleanup=i.onNestComplete(t=>{if(e.setNests(t),t.length>0){const s=t.reduce((e,t)=>t.fitness<e.fitness?t:e);e.setCurrentNest(s)}}),this.errorCleanup=i.onNestError(t=>{e.setError(t)})}async startNesting(){try{e.setError(null);const s=t.config;if(!this.validateConfig(s))throw new Error("Invalid configuration");if(0===t.app.parts.length)throw new Error("No parts loaded. Please import parts before starting nesting.");if(0===t.app.sheets.length)throw new Error("No sheets configured. Please configure sheets before starting nesting.");await i.startNesting(s)}catch(s){const t=s instanceof Error?s.message:"Unknown error occurred";throw e.setError(t),e.setNestingStatus(!1),s}}async stopNesting(){try{await i.stopNesting(),e.setNestingStatus(!1),e.setNestingProgress(0),e.setError(null)}catch(t){const s=t instanceof Error?t.message:"Failed to stop nesting";throw e.setError(s),t}}stopBackgroundWorker(){i.stopBackgroundWorker(),e.setNestingStatus(!1),e.setNestingProgress(0),e.setWorkerStatus({isRunning:!1,currentOperation:"Stopped"})}validateConfig(e){return!(!e||e.spacing<0||e.rotations<1||e.populationSize<1||e.mutationRate<0||e.mutationRate>100||e.threads<1||!e.units||!e.placementType)}get isNesting(){return t.process.isNesting}get progress(){return t.process.progress}get workerStatus(){return t.process.workerStatus}get results(){return t.app.nests}get lastError(){return t.process.lastError}onBackgroundProgress(e){return i.onBackgroundProgress(e)}onBackgroundResponse(e){return i.onBackgroundResponse(e)}cleanup(){this.progressCleanup?.(),this.statusCleanup?.(),this.completeCleanup?.(),this.errorCleanup?.(),this.progressCleanup=null,this.statusCleanup=null,this.completeCleanup=null,this.errorCleanup=null}},a=new class{isConnectedSignal=n(!1);lastHeartbeatSignal=n(Date.now());reconnectAttemptsSignal=n(0);connectionErrorSignal=n(null);get isConnected(){return this.isConnectedSignal[0]}get setIsConnected(){return this.isConnectedSignal[1]}get lastHeartbeat(){return this.lastHeartbeatSignal[0]}get setLastHeartbeat(){return this.lastHeartbeatSignal[1]}get reconnectAttempts(){return this.reconnectAttemptsSignal[0]}get setReconnectAttempts(){return this.reconnectAttemptsSignal[1]}get connectionError(){return this.connectionErrorSignal[0]}get setConnectionError(){return this.connectionErrorSignal[1]}heartbeatInterval=null;reconnectTimeout=null;maxReconnectAttempts=5;heartbeatInterval_ms=5e3;reconnectDelay_ms=2e3;constructor(){this.initializeConnection()}initializeConnection(){this.checkConnection(),this.startHeartbeat(),this.setupEventListeners()}async checkConnection(){try{if(!i.isAvailable)throw new Error("IPC not available");await i.readConfig(),this.setConnectionStatus(!0),this.setReconnectAttempts(0),this.setConnectionError(null)}catch(e){const t=e instanceof Error?e.message:"Connection failed";this.setConnectionStatus(!1),this.setConnectionError(t),this.reconnectAttempts()<this.maxReconnectAttempts&&this.scheduleReconnect()}}setConnectionStatus(s){this.setIsConnected(s),this.setLastHeartbeat(Date.now()),e.setWorkerStatus({isRunning:s&&t.process.isNesting,currentOperation:s?"Connected":"Disconnected"})}startHeartbeat(){this.heartbeatInterval&&clearInterval(this.heartbeatInterval),this.heartbeatInterval=setInterval(()=>{this.checkConnection()},this.heartbeatInterval_ms)}stopHeartbeat(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=null)}scheduleReconnect(){this.reconnectTimeout&&clearTimeout(this.reconnectTimeout);const e=this.reconnectAttempts();this.setReconnectAttempts(e+1);const t=Math.min(this.reconnectDelay_ms*Math.pow(2,e),3e4);this.reconnectTimeout=setTimeout(()=>{this.checkConnection()},t)}setupEventListeners(){i.onNestError(e=>{(e.includes("IPC")||e.includes("connection")||e.includes("timeout"))&&(this.setConnectionError(e),this.setConnectionStatus(!1))}),r(()=>{const s=this.isConnected(),n=this.connectionError();!s&&n?e.setError(`Connection lost: ${n}`):s&&t.process.lastError?.includes("Connection lost")&&e.setError(null)})}async forceReconnect(){this.setReconnectAttempts(0),this.setConnectionError(null),await this.checkConnection()}get connected(){return this.isConnected()}get error(){return this.connectionError()}get reconnectionAttempts(){return this.reconnectAttempts()}get lastHeartbeatTime(){return this.lastHeartbeat()}get isHealthy(){const e=Date.now()-this.lastHeartbeat();return this.isConnected()&&e<2*this.heartbeatInterval_ms}get status(){return{connected:this.connected,healthy:this.isHealthy,error:this.error,reconnectAttempts:this.reconnectionAttempts,lastHeartbeat:this.lastHeartbeatTime}}cleanup(){this.stopHeartbeat(),this.reconnectTimeout&&(clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null)}};export{a as c,i,o as n};
