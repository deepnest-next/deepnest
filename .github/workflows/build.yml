---
name: Application Build

on:
  workflow_dispatch: 
  pull_request:

jobs:
  build:
    env:
      UPDATE_FEED_OWNER: deepnest-next
      UPDATE_FEED_REPOSITORY: deepnest
      BUILD_NUMBER: ${{ github.run_number }}
      PREBUILDS_ONLY: 1
    strategy:
      matrix:
        os:
          [
            "ubuntu-22.04",
            "ubuntu-24.04",
            "ubuntu-24.04-arm",
            "windows-latest",
            "macos-latest",
            "macos-13",
          ]
        arch: ["x64", "arm64"]
        target: ["", "mas"]
        exclude:
          - os: "ubuntu-22.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            arch: "x64"
          - os: "ubuntu-24.04"
            arch: "arm64"
          - os: "macos-13"
            arch: "arm64"
          - os: "macos-latest"
            arch: "x64"
          # Exclude MAS target for non-macOS platforms
          - os: "ubuntu-22.04"
            target: "mas"
          - os: "ubuntu-24.04"
            target: "mas"
          - os: "ubuntu-24.04-arm"
            target: "mas"
          - os: "windows-latest"
            target: "mas"
          # # Include only one target for each macOS build to avoid duplicates
          - os: "macos-13"
            target: "mas"
          # - os: "macos-latest"
          #   target: ""
      fail-fast: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Github checkout
        uses: actions/checkout@v4

      - name: Install distribution dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" || "${{ matrix.os }}" == "ubuntu-24.04" || "${{ matrix.os }}" == "ubuntu-24.04-arm" ]]; then
            sudo apt-get update && sudo apt-get upgrade && sudo apt-get install -y flatpak flatpak-builder elfutils snapd libgl1 libglx-mesa0;
            sudo apt-get install -y dpkg-dev debhelper fakeroot ; 
            flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo ;
            flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo ;
            flatpak update --appstream -y;
            flatpak install -y --user flathub org.freedesktop.Sdk//24.08;
            flatpak install -y --user flathub org.freedesktop.Platform//24.08;
            sudo apt-get install -y flatpak flatpak-builder elfutils ;
            git config --global --add protocol.file.allow always
            #sudo snap install snapcraft --classic;
            #sudo snap install core22 --classic;
          fi
          if [[ "${{ matrix.os }}" == "macos-latest" || "${{ matrix.os }}" == "macos-13" ]]; then
            brew install python-setuptools;
          fi
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            dotnet tool install -g vpk;
          #   choco install -y nsis;
          #   choco install wixtoolset  --version=3.14.0;
          fi

      - name: Setup macOS keychain and signing certificates
        shell: bash
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          # Create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASS" "$APPLE_KEYCHAIN_PATH"
          security set-keychain-settings -lut 3600 "$APPLE_KEYCHAIN_PATH"
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASS" "$APPLE_KEYCHAIN_PATH"
          security default-keychain -s "$APPLE_KEYCHAIN_PATH"

          # Import signing certificate (using one p12 for both app and installer)
          echo -n "$APPLE_MAC_CERT" | base64 --decode -o "$CERTIFICATE_PATH"
          security import "$CERTIFICATE_PATH" -P "$APPLE_SIGN_CERT_PASS" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/sbin/installer -k "$APPLE_KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign:,installer: -s -k "$APPLE_KEYCHAIN_PASS" "$APPLE_KEYCHAIN_PATH"
          rm $CERTIFICATE_PATH

          # Import API key for notarization
          echo -n "${{ secrets.APPLE_API_KEY }}" | base64 --decode -o "$NOTARIZATION_KEY_PATH"

          # Create _assets directory if it doesn't exist and generate provisioning profile
          mkdir -p _assets
          if [[ "${{ matrix.target }}" == "mas" ]]; then
            echo -n "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 --decode -o "_assets/embedded.provisionprofile"
          fi
          security find-identity "$APPLE_KEYCHAIN_PATH" -v > /dev/null || true
          security find-identity -p codesigning "$APPLE_KEYCHAIN_PATH" -v > /dev/null || true
          security find-identity -p installer "$APPLE_KEYCHAIN_PATH" -v > /dev/null || true
        env:
          NOTARIZATION_KEY_PATH: "${{ runner.temp }}/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
          CERTIFICATE_PATH: "${{ runner.temp }}/signing_cert.p12"
          APPLE_MAC_CERT: ${{ secrets.APPLE_MAC_CERT }}
          APPLE_SIGN_CERT_PASS: ${{ secrets.APPLE_MAC_CERT_PASS }}
          APPLE_KEYCHAIN: ${{ secrets.APPLE_KEYCHAIN }}
          APPLE_KEYCHAIN_PATH: "${{ runner.temp }}/${{ secrets.APPLE_KEYCHAIN }}.keychain-db"
          APPLE_KEYCHAIN_PASS: ${{ secrets.APPLE_KEYCHAIN_PASS }}
          APPLE_NOTARY_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}

      - name: Replace AppIdentifierPrefix in plist files
        shell: bash
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          # Find all entitlements plist files and replace the placeholder
          find _assets -name "entitlements*.plist" -exec sed -i '' "s/\$(AppIdentifierPrefix)/${{secrets.APPLE_TEAM_PREFIX}}/g" {} \;

      - name: Setup Node (v22)
        uses: actions/setup-node@v4
        with:
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: "npm"
          node-version: "22"
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        shell: bash
        run: |
          npm install -g npm@latest
          npm ci
          if [[ "${{ matrix.os }}" == "macos-13" || "${{ matrix.os }}" == "macos-latest" ]]; then
            # Install appdmg for macOS builds
            npm install -D appdmg
          fi          

      - name: Build (${{ matrix.arch }})
        uses: DeineAgenturUG/retry@6278ba3ea01ddc52e75d82766fca6cf4d35835cd
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_wait_seconds: 120
          command: |
            mkdir -p out/make/
            if [[ "${{ matrix.target }}" == "mas" && ("${{ matrix.os }}" == "macos-13" || "${{ matrix.os }}" == "macos-latest") ]]; then
              npm run make -- --arch ${{ matrix.arch }} || find ./out -type f
              if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                # For macOS 13, we need to use the universal build for the MAS
                # because it doesn't support arm64 builds.
                npm run make -- --arch universal --platform mas || find ./out -type f
              fi
            else
              npm run make -- --arch ${{ matrix.arch }}
            fi
            find ./out -type f
          shell: bash
        env:
          NOTARIZATION_KEY_PATH: "${{ runner.temp }}/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
          APPLE_NOTARY_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_KEYCHAIN_PATH: "${{ runner.temp }}/${{ secrets.APPLE_KEYCHAIN }}.keychain-db"
          APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
          APPLE_DEVELOPER_ID_INSTALLER: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER }}
          APPLE_MAS_IDENTITY: ${{ secrets.APPLE_MAS_IDENTITY }}
          APPLE_MAS_INSTALLER_IDENTITY: ${{ secrets.APPLE_MAS_INSTALLER_IDENTITY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          CI: "true"
          BUILD_NUMBER: ${{ github.run_number }}
          MAKER_ARCH: ${{ matrix.arch }}
          MAKER_PLATFORM: ${{ matrix.target == 'mas' && 'mas' || '' }}

      # TODO: add AppImage for linux if we can get snap and/or flatpak to work
      
      - name: Prepare minimal debian/control
        if: ${{ matrix.os == 'ubuntu-22.04' ||matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm' }}
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          ARCH=amd64
          mkdir -p debian
          cat > debian/control <<EOF
          Source: $PKG
          Section: utils
          Priority: optional
          Maintainer: CI Runner <ci@github.com>
          Standards-Version: 4.5.0
          Package: $PKG
          Version: $VER
          Architecture: $ARCH
          Description: Temporäres Control für dpkg-shlibdeps
          EOF

      - name: Scan shared-library dependencies
        if: ${{ matrix.os == 'ubuntu-22.04' ||matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm' }}
        id: scan
        run: |
          # alle ausführbaren Dateien sammeln
          files=$(find out/ -type f \( -executable -o -name '*.node' \))
          # dpkg-shlibdeps erzeugt standardmäßig eine "Depends:"-Zeile
          deps=$(dpkg-shlibdeps $files -O | sed 's/^[[:space:]]*Depends: //')
          # in Datei schreiben
          echo "Depends: $deps" > control-deps.txt
          # als Schritt-Output verfügbar machen
          echo "DEPS=$deps" >> $GITHUB_OUTPUT
      - name: Scan SONAME-Abhängigkeiten (.so-Libraries)
        if: ${{ matrix.os == 'ubuntu-22.04' ||matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm' }}
        run: |
          files=$(find out/ -type f \( -executable -o -name '*.node' \))
          echo "# SONAME Abhängigkeiten pro Binary" > so-deps.txt
          for f in $files; do
            echo "## $f" >> so-deps.txt
            # listet SONAME → Pfad der Library
            ldd "$f" | grep "=>" | awk '{print $1 " -> " $3}' >> so-deps.txt
            echo "" >> so-deps.txt
          done
      - name: Show detected dependencies
        if: ${{ matrix.os == 'ubuntu-22.04' ||matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm' }}
        run: |
          echo "=== Debian Depends ==="
          cat control-deps.txt
          echo
          echo "=== SONAME Abhängigkeiten ==="
          cat so-deps.txt

      - name: Upload dependencies artifact
        if: ${{ matrix.os == 'ubuntu-22.04' ||matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm' }}
        uses: actions/upload-artifact@v4
        with:
          name: debian-dependencies-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            control-deps.txt
            so-deps.txt
  
      - name: Upload artifacts (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        #if: ${{ ((matrix.os == 'ubuntu-24.04' && matrix.arch == 'x64') || (matrix.os == 'ubuntu-24.04-arm' && matrix.arch == 'arm64') || (matrix.os == 'windows' && (matrix.arch == 'x64' || matrix.arch == 'arm64')) || (matrix.os == 'macos_x64' && matrix.arch == 'x64') || (matrix.os == 'macos' && matrix.arch == 'arm64')) }}
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.target == 'mas' && '-mas' || '' }}
          retention-days: 1
          path: |
            out/make/

  map-rpm:
    needs: build

    strategy:
      matrix:
        os:
          [
            "ubuntu-22.04",
            "ubuntu-24.04",
            "ubuntu-24.04-arm",
          ]
        arch: ["x64", "arm64"]
        docker: [
          "fedora:latest",
          "opensuse/leap:latest",
          "opensuse/tumbleweed:latest",
          "rockylinux:9.3",
          "rockylinux:8.9",
          "almalinux:latest",
          "redhat/ubi8:latest",
          "redhat/ubi9:latest",
          ]
        exclude:
          - os: "ubuntu-22.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            arch: "x64"
          - os: "ubuntu-24.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            docker: "fedora:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:9.3"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:8.9"
          - os: "ubuntu-24.04-arm"
            docker: "almalinux:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi9:latest"
          - os: "ubuntu-22.04"
            docker: "fedora:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-22.04"
            docker: "rockylinux:9.3"
          - os: "ubuntu-22.04"
            docker: "rockylinux:8.9"
          - os: "ubuntu-22.04"
            docker: "almalinux:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi9:latest"
      fail-fast: true

    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.docker }}

    steps:
      - name: Download Debian-artifacts
        uses: actions/download-artifact@v4
        with:
          name: debian-dependencies-${{ matrix.os }}-${{ matrix.arch }}
          path: .

      - name: Install query tools & awk (distro-agnostisch)
        run: |
          echo "DOCKER_LABEL=$(echo '${{ matrix.docker }}' | tr ':/' '_')" >> $GITHUB_ENV
          if   command -v dnf    >/dev/null; then
            echo "Detected dnf → installing dnf-plugins-core and gawk"
            dnf install -y dnf-plugins-core gawk
          elif command -v yum    >/dev/null; then
            echo "Detected yum → installing yum-utils and gawk"
            yum install -y yum-utils gawk
          elif command -v zypper >/dev/null; then
            echo "Detected zypper → refreshing repos and installing rpm and gawk"
            zypper refresh
            zypper install -y rpm gawk
          else
            echo "No supported package manager found, assuming awk is present"
          fi
  
      - name: Map SONAME → RPM-Paket (inkl. generische .so)
        run: |
          echo "# RPM-Abhängigkeiten pro SONAME (inkl. generischer .so)" > rpm-deps-detail.txt
          rpm_list=()
          sos=$(grep -- '->' so-deps.txt | cut -d ' ' -f1 | sort -u)

          # Query-Befehl wählen
          if   command -v dnf    >/dev/null; then QUERY="dnf repoquery --quiet --whatprovides"
          elif command -v yum    >/dev/null; then QUERY="yum whatprovides"
          elif command -v zypper >/dev/null; then QUERY="zypper search --provides"
          else                              QUERY="rpm -q --whatprovides"; fi

          for so in $sos; do
            echo "## $so" >> rpm-deps-detail.txt

            # Exakte SONAME-Abfrage
            pkg_full=$($QUERY "*$so" | head -n1)
            echo "$so => $pkg_full" >> rpm-deps-detail.txt
            rpm_list+=("$pkg_full")

            # Generischen Symlink (libname.so)
            base=$(echo "$so" | sed -r 's/(.*\.so)\..+/\1/')
            if [[ "$base" != "$so" ]]; then
              pkg_base=$($QUERY "*$base" | head -n1)
              echo "$base => $pkg_base" >> rpm-deps-detail.txt
              rpm_list+=("$pkg_base")
            fi

            echo "" >> rpm-deps-detail.txt
          done

          # Kommagetrennte Requires-Zeile
          uniq_pkgs=$(printf "%s\n" "${rpm_list[@]}" | sort -u | paste -sd ', ')
          echo "Requires: $uniq_pkgs" > rpm-deps.txt


      - name: Upload RPM-mapping artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-dependencies-${{ env.DOCKER_LABEL }}
          retention-days: 1
          path: |
            rpm-deps.txt
            rpm-deps-detail.txt