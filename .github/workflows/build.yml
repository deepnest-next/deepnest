name: Application Build

on:
  workflow_dispatch: 
  pull_request:

jobs:
  linux-build:
    uses: ./.github/workflows/linux-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}

  windows-build:
    uses: ./.github/workflows/windows-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}

  macos-build:
    uses: ./.github/workflows/macos-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_MAC_CERT: ${{ secrets.APPLE_MAC_CERT }}
      APPLE_MAC_CERT_PASS: ${{ secrets.APPLE_MAC_CERT_PASS }}
      APPLE_KEYCHAIN: ${{ secrets.APPLE_KEYCHAIN }}
      APPLE_KEYCHAIN_PASS: ${{ secrets.APPLE_KEYCHAIN_PASS }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}
      APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
      APPLE_DEVELOPER_ID_INSTALLER: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER }}
      APPLE_MAS_IDENTITY: ${{ secrets.APPLE_MAS_IDENTITY }}
      APPLE_MAS_INSTALLER_IDENTITY: ${{ secrets.APPLE_MAS_INSTALLER_IDENTITY }}
      APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}

  map-rpm:
    needs: linux-build

    strategy:
      matrix:
        os:
          [
            "ubuntu-22.04",
            "ubuntu-24.04",
            "ubuntu-24.04-arm",
          ]
        arch: ["x64", "arm64"]
        docker: [
          "fedora:latest",
          "opensuse/leap:latest",
          "opensuse/tumbleweed:latest",
          "rockylinux:9.3",
          "rockylinux:8.9",
          "almalinux:latest",
          "redhat/ubi8:latest",
          "redhat/ubi9:latest",
          ]
        exclude:
          - os: "ubuntu-22.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            arch: "x64"
          - os: "ubuntu-24.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            docker: "fedora:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:9.3"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:8.9"
          - os: "ubuntu-24.04-arm"
            docker: "almalinux:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi9:latest"
          - os: "ubuntu-22.04"
            docker: "fedora:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-22.04"
            docker: "rockylinux:9.3"
          - os: "ubuntu-22.04"
            docker: "rockylinux:8.9"
          - os: "ubuntu-22.04"
            docker: "almalinux:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi9:latest"
      fail-fast: true

    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.docker }}

    steps:
      - name: Download Debian-artifacts
        uses: actions/download-artifact@v4
        with:
          name: debian-dependencies-${{ matrix.os }}-${{ matrix.arch }}
          path: .

      - name: Install query tools & awk (distro-agnostisch)
        run: |
          echo "DOCKER_LABEL=$(echo '${{ matrix.docker }}' | tr ':/' '_')" >> $GITHUB_ENV
          if   command -v dnf    >/dev/null; then
            echo "Detected dnf → installing dnf-plugins-core and gawk"
            dnf install -y dnf-plugins-core gawk
          elif command -v yum    >/dev/null; then
            echo "Detected yum → installing yum-utils and gawk"
            yum install -y yum-utils gawk
          elif command -v zypper >/dev/null; then
            echo "Detected zypper → refreshing repos and installing rpm and gawk"
            zypper refresh
            zypper install -y rpm gawk
          else
            echo "No supported package manager found, assuming awk is present"
          fi
  
      - name: Map SONAME → RPM-Paket (inkl. generische .so)
        run: |
          echo "# RPM-Abhängigkeiten pro SONAME (inkl. generischer .so)" > rpm-deps-detail.txt
          rpm_list=()
          sos=$(grep -- '->' so-deps.txt | cut -d ' ' -f1 | sort -u)

          # Query-Befehl wählen
          if   command -v dnf    >/dev/null; then QUERY="dnf repoquery --quiet --whatprovides"
          elif command -v yum    >/dev/null; then QUERY="yum whatprovides"
          elif command -v zypper >/dev/null; then QUERY="zypper search --provides"
          else                              QUERY="rpm -q --whatprovides"; fi

          for so in $sos; do
            echo "## $so" >> rpm-deps-detail.txt

            # Exakte SONAME-Abfrage
            pkg_full=$($QUERY "*$so" | head -n1)
            echo "$so => $pkg_full" >> rpm-deps-detail.txt
            rpm_list+=("$pkg_full")

            # Generischen Symlink (libname.so)
            base=$(echo "$so" | sed -r 's/(.*\.so)\..+/\1/')
            if [[ "$base" != "$so" ]]; then
              pkg_base=$($QUERY "*$base" | head -n1)
              echo "$base => $pkg_base" >> rpm-deps-detail.txt
              rpm_list+=("$pkg_base")
            fi

            echo "" >> rpm-deps-detail.txt
          done

          # Kommagetrennte Requires-Zeile
          uniq_pkgs=$(printf "%s\n" "${rpm_list[@]}" | sort -u | paste -sd ', ')
          echo "Requires: $uniq_pkgs" > rpm-deps.txt


      - name: Upload RPM-mapping artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-dependencies-${{ env.DOCKER_LABEL }}
          retention-days: 1
          path: |
            rpm-deps.txt
            rpm-deps-detail.txt