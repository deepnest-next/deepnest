name: Application Build

on:
  workflow_dispatch: 
  pull_request:

jobs:
  linux-build:
    uses: ./.github/workflows/linux-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}

  windows-build:
    uses: ./.github/workflows/windows-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}

  macos-build:
    uses: ./.github/workflows/macos-build.yml
    with:
      build_number: ${{ github.run_number }}
      prebuilds_only: "1"
    secrets:
      APPLE_MAC_CERT: ${{ secrets.APPLE_MAC_CERT }}
      APPLE_MAC_CERT_PASS: ${{ secrets.APPLE_MAC_CERT_PASS }}
      APPLE_KEYCHAIN: ${{ secrets.APPLE_KEYCHAIN }}
      APPLE_KEYCHAIN_PASS: ${{ secrets.APPLE_KEYCHAIN_PASS }}
      APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
      APPLE_TEAM_PREFIX: ${{ secrets.APPLE_TEAM_PREFIX }}
      APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
      APPLE_DEVELOPER_ID_INSTALLER: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER }}
      APPLE_MAS_IDENTITY: ${{ secrets.APPLE_MAS_IDENTITY }}
      APPLE_MAS_INSTALLER_IDENTITY: ${{ secrets.APPLE_MAS_INSTALLER_IDENTITY }}
      APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}

  map-rpm:
    needs: linux-build

    strategy:
      matrix:
        os:
          [
            "ubuntu-22.04",
            "ubuntu-24.04",
            "ubuntu-24.04-arm",
          ]
        arch: ["x64", "arm64"]
        docker: [
          "fedora:latest",
          "opensuse/leap:latest",
          "opensuse/tumbleweed:latest",
          "rockylinux:9.3",
          "rockylinux:8.9",
          "almalinux:latest",
          "redhat/ubi8:latest",
          "redhat/ubi9:latest",
          ]
        exclude:
          - os: "ubuntu-22.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            arch: "x64"
          - os: "ubuntu-24.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            docker: "fedora:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-24.04-arm"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:9.3"
          - os: "ubuntu-24.04-arm"
            docker: "rockylinux:8.9"
          - os: "ubuntu-24.04-arm"
            docker: "almalinux:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-24.04-arm"
            docker: "redhat/ubi9:latest"
          - os: "ubuntu-22.04"
            docker: "fedora:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/leap:latest"
          - os: "ubuntu-22.04"
            docker: "opensuse/tumbleweed:latest"
          - os: "ubuntu-22.04"
            docker: "rockylinux:9.3"
          - os: "ubuntu-22.04"
            docker: "rockylinux:8.9"
          - os: "ubuntu-22.04"
            docker: "almalinux:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi8:latest"
          - os: "ubuntu-22.04"
            docker: "redhat/ubi9:latest"
      fail-fast: true

    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.docker }}

    steps:
      - name: Download Debian-artifacts
        uses: actions/download-artifact@v4
        with:
          name: debian-dependencies-${{ matrix.os }}-${{ matrix.arch }}
          path: .

      - name: Install query tools & awk (distro-agnostisch)
        run: |
          echo "DOCKER_LABEL=$(echo '${{ matrix.docker }}' | tr ':/' '_')" >> $GITHUB_ENV
          if   command -v dnf    >/dev/null; then
            echo "Detected dnf → installing dnf-plugins-core and gawk"
            dnf install -y dnf-plugins-core gawk
          elif command -v yum    >/dev/null; then
            echo "Detected yum → installing yum-utils and gawk"
            yum install -y yum-utils gawk
          elif command -v zypper >/dev/null; then
            echo "Detected zypper → refreshing repos"
            zypper refresh
            
            # Special handling for opensuse/leap which has rpm-ndb conflict
            if [[ "${{ matrix.docker }}" == "opensuse/leap:latest" ]]; then
              echo "OpenSUSE Leap detected - checking for rpm-ndb package"
              if rpm -q rpm-ndb &>/dev/null; then
                echo "rpm-ndb is installed - using that instead of installing rpm"
                zypper install -y gawk
              else
                echo "rpm-ndb not found - installing rpm and gawk"
                zypper install -y rpm gawk
              fi
            else
              # Other OpenSUSE distributions
              echo "Installing rpm and gawk"
              zypper install -y rpm gawk
            fi
            
            # Additional tools specifically for zypper-based distributions
            echo "Installing additional tools for better package searching"
            zypper install -y findutils grep
          else
            echo "No supported package manager found, assuming awk is present"
          fi
  
      - name: Map SONAME → RPM-Paket (inkl. generische .so)
        run: |
          echo "# RPM-Abhängigkeiten pro SONAME (inkl. generischer .so)" > rpm-deps-detail.txt
          rpm_list=()
          sos=$(grep -- '->' so-deps.txt | cut -d ' ' -f1 | sort -u)
          
          # Detect if this is an openSUSE distribution
          is_opensuse=0
          if command -v zypper >/dev/null; then
            is_opensuse=1
            echo "Detected openSUSE distribution, using special package search logic"
          fi

          # Query-Befehl wählen for non-openSUSE distributions
          if   command -v dnf    >/dev/null && [ $is_opensuse -eq 0 ]; then 
            QUERY="dnf repoquery --quiet --whatprovides"
          elif command -v yum    >/dev/null && [ $is_opensuse -eq 0 ]; then 
            QUERY="yum whatprovides"
          elif [ $is_opensuse -eq 0 ]; then
            QUERY="rpm -q --whatprovides"
          fi

          for so in $sos; do
            echo "## $so" >> rpm-deps-detail.txt
            pkg_full=""
            pkg_base=""

            if [ $is_opensuse -eq 1 ]; then
              # Special handling for openSUSE
              # First try the rpm command directly
              rpm_output=$(rpm -q --whatprovides "*$so" 2>/dev/null)
              if [ $? -eq 0 ] && [ -n "$rpm_output" ]; then
                pkg_full=$(echo "$rpm_output" | head -n1)
              else
                # If direct rpm query fails, use zypper search --provides with grep
                echo "Searching for provider of $so using zypper..."
                zypper_output=$(zypper search --provides "*$so" 2>/dev/null)
                if [ -n "$zypper_output" ] && echo "$zypper_output" | grep -q "No matching items found."; then
                  echo "No match found for $so"
                  pkg_full="not-found"
                else
                  # Extract package name from zypper output (skip header lines)
                  pkg_full=$(echo "$zypper_output" | grep -v "Loading" | grep -v "|" | grep -v "^$" | head -n1 | awk '{print $1}')
                  if [ -z "$pkg_full" ]; then
                    # Try alternative parsing if above fails
                    pkg_full=$(echo "$zypper_output" | grep -v "Loading" | grep -v "^$" | grep -o -E '[^ ]+\.[^. ]+' | head -n1)
                  fi
                fi
              fi
            else
              # Existing code for other distributions
              pkg_full=$($QUERY "*$so" | head -n1)
            fi
            
            echo "$so => $pkg_full" >> rpm-deps-detail.txt
            if [ -n "$pkg_full" ] && [ "$pkg_full" != "not-found" ]; then
              rpm_list+=("$pkg_full")
            fi

            # Generischen Symlink (libname.so)
            base=$(echo "$so" | sed -r 's/(.*\.so)\..+/\1/')
            if [[ "$base" != "$so" ]]; then
              if [ $is_opensuse -eq 1 ]; then
                # Special handling for openSUSE for base library name
                rpm_output=$(rpm -q --whatprovides "*$base" 2>/dev/null)
                if [ $? -eq 0 ] && [ -n "$rpm_output" ]; then
                  pkg_base=$(echo "$rpm_output" | head -n1)
                else
                  zypper_output=$(zypper search --provides "*$base" 2>/dev/null)
                  if [ -n "$zypper_output" ] && echo "$zypper_output" | grep -q "No matching items found."; then
                    echo "No match found for $base"
                    pkg_base="not-found"
                  else
                    pkg_base=$(echo "$zypper_output" | grep -v "Loading" | grep -v "|" | grep -v "^$" | head -n1 | awk '{print $1}')
                    if [ -z "$pkg_base" ]; then
                      pkg_base=$(echo "$zypper_output" | grep -v "Loading" | grep -v "^$" | grep -o -E '[^ ]+\.[^. ]+' | head -n1)
                    fi
                  fi
                fi
              else
                # Existing code for other distributions
                pkg_base=$($QUERY "*$base" | head -n1)
              fi
              
              echo "$base => $pkg_base" >> rpm-deps-detail.txt
              if [ -n "$pkg_base" ] && [ "$pkg_base" != "not-found" ]; then
                rpm_list+=("$pkg_base")
              fi
            fi

            echo "" >> rpm-deps-detail.txt
          done

          # Show found packages for debugging
          echo "Found packages:"
          printf "%s\n" "${rpm_list[@]}" | sort -u
          
          # Kommagetrennte Requires-Zeile
          if [ ${#rpm_list[@]} -eq 0 ]; then
            echo "Warning: No packages found, creating empty requires"
            echo "Requires: " > rpm-deps.txt
          else
            uniq_pkgs=$(printf "%s\n" "${rpm_list[@]}" | sort -u | grep -v "^$" | paste -sd ', ')
            echo "Requires: $uniq_pkgs" > rpm-deps.txt
          fi

      - name: Upload RPM-mapping artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-dependencies-${{ env.DOCKER_LABEL }}
          retention-days: 1
          path: |
            rpm-deps.txt
            rpm-deps-detail.txt