name: Linux Build

on:
  workflow_call:
    inputs:
      build_number:
        required: true
        type: string
      prebuilds_only:
        required: true
        type: string
    secrets:
      APPLE_API_KEY:
        required: false
      APPLE_API_KEY_ID:
        required: false
      APPLE_API_ISSUER:
        required: false
      APPLE_TEAM_PREFIX:
        required: false

jobs:
  build:
    env:
      UPDATE_FEED_OWNER: deepnest-next
      UPDATE_FEED_REPOSITORY: deepnest
      BUILD_NUMBER: ${{ inputs.build_number }}
      PREBUILDS_ONLY: ${{ inputs.prebuilds_only }}
    
    strategy:
      matrix:
        os: ["ubuntu-22.04", "ubuntu-24.04", "ubuntu-24.04-arm"]
        arch: ["x64", "arm64"]
        exclude:
          - os: "ubuntu-22.04"
            arch: "arm64"
          - os: "ubuntu-24.04-arm"
            arch: "x64"
          - os: "ubuntu-24.04"
            arch: "arm64"
      fail-fast: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Github checkout
        uses: actions/checkout@v4

      - name: Install distribution dependencies
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get upgrade && sudo apt-get install -y flatpak flatpak-builder elfutils snapd libgl1 libglx-mesa0;
          sudo apt-get install -y dpkg-dev debhelper fakeroot ; 
          flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo ;
          flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo ;
          flatpak update --appstream -y;
          flatpak install -y --user flathub org.freedesktop.Sdk//24.08;
          flatpak install -y --user flathub org.freedesktop.Platform//24.08;
          sudo apt-get install -y flatpak flatpak-builder elfutils ;
          git config --global --add protocol.file.allow always
          #sudo snap install snapcraft --classic;
          #sudo snap install core22 --classic;

      - name: Setup Node (v22)
        uses: actions/setup-node@v4
        with:
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: "npm"
          node-version: "22"
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        shell: bash
        run: |
          npm install -g npm@latest
          npm ci

      - name: Build (${{ matrix.arch }})
        uses: DeineAgenturUG/retry@6278ba3ea01ddc52e75d82766fca6cf4d35835cd
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_wait_seconds: 120
          command: |
            mkdir -p out/make/
            npm run make -- --arch ${{ matrix.arch }}
            find ./out -type f
          shell: bash
        env:
          CI: "true"
          BUILD_NUMBER: ${{ inputs.build_number }}
          MAKER_ARCH: ${{ matrix.arch }}

      # TODO: add AppImage for linux if we can get snap and/or flatpak to work
      
      - name: Prepare minimal debian/control
        run: |
          PKG=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          ARCH=amd64
          mkdir -p debian
          cat > debian/control <<EOF
          Source: $PKG
          Section: utils
          Priority: optional
          Maintainer: CI Runner <ci@github.com>
          Standards-Version: 4.5.0
          Package: $PKG
          Version: $VER
          Architecture: $ARCH
          Description: Temporäres Control für dpkg-shlibdeps
          EOF

      - name: Scan shared-library dependencies
        id: scan
        run: |
          # alle ausführbaren Dateien sammeln
          files=$(find out/ -type f \( -executable -o -name '*.node' \))
          # dpkg-shlibdeps erzeugt standardmäßig eine "Depends:"-Zeile
          deps=$(dpkg-shlibdeps $files -O | sed 's/^[[:space:]]*Depends: //')
          # in Datei schreiben
          echo "Depends: $deps" > control-deps.txt
          # als Schritt-Output verfügbar machen
          echo "DEPS=$deps" >> $GITHUB_OUTPUT
          
      - name: Scan SONAME-Abhängigkeiten (.so-Libraries)
        run: |
          files=$(find out/ -type f \( -executable -o -name '*.node' \))
          echo "# SONAME Abhängigkeiten pro Binary" > so-deps.txt
          for f in $files; do
            echo "## $f" >> so-deps.txt
            # listet SONAME → Pfad der Library
            ldd "$f" | grep "=>" | awk '{print $1 " -> " $3}' >> so-deps.txt
            echo "" >> so-deps.txt
          done
          
      - name: Show detected dependencies
        run: |
          echo "=== Debian Depends ==="
          cat control-deps.txt
          echo
          echo "=== SONAME Abhängigkeiten ==="
          cat so-deps.txt

      - name: Upload dependencies artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-dependencies-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            control-deps.txt
            so-deps.txt
  
      - name: Upload artifacts (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 1
          path: |
            out/make/