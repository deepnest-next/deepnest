name: build release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-and-release-linux:
    env:
      BUILD_FOR_OS: linux
    strategy:
      matrix:
        node-version: [22.x]
        os: [ubuntu-24.04, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Boost (only for Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -yq libboost-dev

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set architecture
        id: set_arch
        run: |
          # Check if the runner OS includes "arm" and set the ARCH environment variable accordingly
          if [[ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=x64" >> $GITHUB_ENV
          fi
          echo "Architecture set to: $ARCH"

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            // Retrieve the latest release information using the GitHub API
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput("upload_url", release.data.upload_url);
            core.setOutput("release_id", release.data.id);
            core.setOutput("tag", release.data.tag_name);
            console.log("Found release:", release.data.tag_name);

      - name: Build project
        run: |
          # Install dependencies and run the build script
          npm install
          npm run build

      - name: Package build
        run: |
          # Retrieve the release tag from the previous step
          TAG=${{ steps.get_release.outputs.tag }}
          # Set the build directory name using the release tag and architecture
          BUILD_DIR="deepnest-${TAG}-${BUILD_FOR_OS}-${ARCH}"
          echo "Creating build in: $BUILD_DIR"
          # Run Electron Packager to package the application into the specified build directory
          npx @electron/packager . "deepnest-${TAG}" --overwrite
          # Zip the build directory with the same name
          zip -r "${BUILD_DIR}.zip" "$BUILD_DIR"
      - name: Artefakt an letztes Release anhängen
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: deepnest-${{ steps.get_release.outputs.tag }}-${{ env.BUILD_FOR_OS}}-${{ env.ARCH }}.zip
          asset_name: deepnest-${{ steps.get_release.outputs.tag }}-${{ env.BUILD_FOR_OS}}-${{ env.ARCH }}.zip
          asset_content_type: application/zip



  build-and-release-macos:
    env:
      BUILD_FOR_OS: darwin
    strategy:
      matrix:
        node-version: [22.x]
        os: [macos-13, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Boost (only for Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -yq libboost-dev

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set architecture
        id: set_arch
        run: |
          # Check if the runner OS includes "arm" and set the ARCH environment variable accordingly
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=x64" >> $GITHUB_ENV
          fi
          echo "Architecture set to: $ARCH"

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            // Retrieve the latest release information using the GitHub API
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput("upload_url", release.data.upload_url);
            core.setOutput("release_id", release.data.id);
            core.setOutput("tag", release.data.tag_name);
            console.log("Found release:", release.data.tag_name);

      - name: Build project
        run: |
          # Install dependencies and run the build script
          npm install
          npm run build

      - name: Package build
        run: |
          # Retrieve the release tag from the previous step
          TAG=${{ steps.get_release.outputs.tag }}
          # Set the build directory name using the release tag and architecture
          BUILD_DIR="deepnest-${TAG}-${BUILD_FOR_OS}-${ARCH}"
          echo "Creating build in: $BUILD_DIR"
          # Run Electron Packager to package the application into the specified build directory
          npx @electron/packager . "deepnest-${TAG}" --overwrite
          # Zip the build directory with the same name
          zip -r "${BUILD_DIR}.zip" "$BUILD_DIR"

      - name: Artefakt an letztes Release anhängen
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: deepnest-${{ steps.get_release.outputs.tag }}-${{ env.BUILD_FOR_OS}}-${{ env.ARCH }}.zip
          asset_name: deepnest-${{ steps.get_release.outputs.tag }}-${{ env.BUILD_FOR_OS}}-${{ env.ARCH }}.zip
          asset_content_type: application/zip